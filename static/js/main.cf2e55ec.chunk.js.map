{"version":3,"sources":["components/Weather.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["Weather","_ref","data","Object","esm_extends","react_default","a","createElement","name","className","sys","country","main","temp","pressure","sunset","error","API_KEY","Form","_useState","useState","_useState2","slicedToArray","setData","gettingWeather","asyncToGenerator","regenerator_default","mark","_callee","e","city","api_url","_data","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","stop","this","_x","apply","arguments","onSubmit","type","placeholder","src_components_Weather","App","components_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gPAoBeA,SAlBC,SAAAC,GAAiB,IAAXC,EAAWC,OAAAC,EAAA,EAAAD,CAAA,GAAAF,GAC/B,OACEI,EAAAC,EAAAC,cAAA,WACGL,EAAKM,MACJH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACbJ,EAAAC,EAAAC,cAAA,sBACaL,EAAKM,KADlB,KAC0BN,EAAKQ,IAAIC,SAEnCN,EAAAC,EAAAC,cAAA,yBAAiBL,EAAKU,KAAKC,MAC3BR,EAAAC,EAAAC,cAAA,sBAAcL,EAAKU,KAAKE,UACxBT,EAAAC,EAAAC,cAAA,oBAAYL,EAAKQ,IAAIK,SAGzBV,EAAAC,EAAAC,cAAA,SAAIL,EAAKc,UCXTC,SAAU,oCA0BDC,MAzBf,WAAgB,IAAAC,EACUC,mBAAS,IADnBC,EAAAlB,OAAAmB,EAAA,EAAAnB,CAAAgB,EAAA,GACPjB,EADOmB,EAAA,GACDE,EADCF,EAAA,GAGRG,EAAc,eAAAvB,EAAAE,OAAAsB,EAAA,EAAAtB,CAAAuB,EAAApB,EAAAqB,KAAG,SAAAC,EAAOC,GAAP,IAAAC,EAAAC,EAAAC,EAAA,OAAAN,EAAApB,EAAA2B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACrBP,EAAEQ,mBACEP,EAAOD,EAAES,OAAOC,SAAST,KAAKU,OAFb,CAAAN,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,EAIGK,MAAK,qDAAAC,OAC4BZ,EAD5B,WAAAY,OAC0CzB,EAD1C,kBAJR,cAIbc,EAJaG,EAAAS,KAAAT,EAAAE,KAAA,EAOAL,EAAQa,OAPR,OAOb1C,EAPagC,EAAAS,KAQnBpB,EAAQrB,GACR2C,QAAQC,IAAI5C,GATO,yBAAAgC,EAAAa,SAAAnB,EAAAoB,SAAH,gBAAAC,GAAA,OAAAhD,EAAAiD,MAAAF,KAAAG,YAAA,GAYpB,OACE9C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAME,UAAU,OAAO2C,SAAU5B,GAC/BnB,EAAAC,EAAAC,cAAA,SAAO8C,KAAK,OAAO7C,KAAK,OAAO8C,YAAY,SAC3CjD,EAAAC,EAAAC,cAAA,kCAEFF,EAAAC,EAAAC,cAACgD,EAAYrD,KCfJsD,MARf,WACE,OACEnD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACkD,EAAD,QCMcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3D,EAAAC,EAAAC,cAAC0D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cf2e55ec.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Weather.css';\r\nconst Weather = ({ ...data }) => {\r\n  return (\r\n    <div>\r\n      {data.name && (\r\n        <div className=\"container\">\r\n          <p>\r\n            Location: {data.name}, {data.sys.country}\r\n          </p>\r\n          <p>Temperature: {data.main.temp}</p>\r\n          <p>Pressure: {data.main.pressure}</p>\r\n          <p>Sunset: {data.sys.sunset}</p>\r\n        </div>\r\n      )}\r\n      <p>{data.error}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n","import React, { useState } from 'react';\r\nimport Weather from './Weather';\r\nimport './Form.css';\r\n\r\nconst API_KEY = '01195fa0bf71ec2ea337ab1a89cc4cc6';\r\nfunction Form() {\r\n  const [data, setData] = useState([]);\r\n\r\n  const gettingWeather = async (e) => {\r\n    e.preventDefault();\r\n    var city = e.target.elements.city.value;\r\n    if (city) {\r\n      const api_url = await fetch(\r\n        `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`,\r\n      );\r\n      const data = await api_url.json();\r\n      setData(data);\r\n      console.log(data);\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <form className=\"form\" onSubmit={gettingWeather}>\r\n        <input type=\"text\" name=\"city\" placeholder=\"City\" />\r\n        <button>Receive weather</button>\r\n      </form>\r\n      <Weather {...data} />\r\n    </div>\r\n  );\r\n}\r\nexport default Form;\r\n","import React from 'react';\r\nimport Form from './components/Form';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Form />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}