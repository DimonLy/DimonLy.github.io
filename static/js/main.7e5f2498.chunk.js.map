{"version":3,"sources":["components/info.js","components/weather.js","components/form.js","components/Greeting.js","App.js","serviceWorker.js","index.js"],"names":["Info","react_default","a","createElement","Weather","_ref","data","Object","esm_extends","name","sys","country","main","temp","pressure","sunset","error","API_KEY","Form","_useState","useState","_useState2","slicedToArray","setData","gettingWeather","asyncToGenerator","regenerator_default","mark","_callee","e","city","api_url","_data","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","stop","this","_x","apply","arguments","onSubmit","type","placeholder","weather","Greeting","App","components_Greeting","info","components_form","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+JAUeA,MARf,WACE,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,6ECeSC,EAnBC,SAAAC,GAAiB,IAAXC,EAAWC,OAAAC,EAAA,EAAAD,CAAA,GAAAF,GAC/B,OACEJ,EAAAC,EAAAC,cAAA,WACGG,EAAKG,MACJR,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,sBACaG,EAAKG,KADlB,KAC0BH,EAAKI,IAAIC,SAEnCV,EAAAC,EAAAC,cAAA,yBAAiBG,EAAKM,KAAKC,MAC3BZ,EAAAC,EAAAC,cAAA,sBAAcG,EAAKM,KAAKE,UACxBb,EAAAC,EAAAC,cAAA,oBAAYG,EAAKI,IAAIK,QACrBd,EAAAC,EAAAC,cAAA,SAAIG,EAAKU,QAGbf,EAAAC,EAAAC,cAAA,SAAIG,EAAKU,SCbTC,EAAU,mCA0BDC,MAzBf,WAAgB,IAAAC,EACUC,mBAAS,IADnBC,EAAAd,OAAAe,EAAA,EAAAf,CAAAY,EAAA,GACPb,EADOe,EAAA,GACDE,EADCF,EAAA,GAGRG,EAAc,eAAAnB,EAAAE,OAAAkB,EAAA,EAAAlB,CAAAmB,EAAAxB,EAAAyB,KAAG,SAAAC,EAAOC,GAAP,IAAAC,EAAAC,EAAAC,EAAA,OAAAN,EAAAxB,EAAA+B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACrBP,EAAEQ,mBACEP,EAAOD,EAAES,OAAOC,SAAST,KAAKU,OAFb,CAAAN,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,EAIGK,MAAK,qDAAAC,OAC4BZ,EAD5B,WAAAY,OAC0CzB,EAD1C,kBAJR,cAIbc,EAJaG,EAAAS,KAAAT,EAAAE,KAAA,EAOAL,EAAQa,OAPR,OAObtC,EAPa4B,EAAAS,KAQnBpB,EAAQjB,GACRuC,QAAQC,IAAIxC,GATO,yBAAA4B,EAAAa,SAAAnB,EAAAoB,SAAH,gBAAAC,GAAA,OAAA5C,EAAA6C,MAAAF,KAAAG,YAAA,GAYpB,OACElD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAMiD,SAAU5B,GACdvB,EAAAC,EAAAC,cAAA,SAAOkD,KAAK,OAAO5C,KAAK,OAAO6C,YAAY,SAC3CrD,EAAAC,EAAAC,cAAA,kCAEFF,EAAAC,EAAAC,cAACoD,EAAYjD,KCnBJkD,MAJf,WACE,OAAOvD,EAAAC,EAAAC,cAAA,+BCYMsD,MAVf,WACE,OACExD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACuD,EAAD,CAAUjD,KAAK,WACfR,EAAAC,EAAAC,cAACwD,EAAD,MACA1D,EAAAC,EAAAC,cAACyD,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlE,EAAAC,EAAAC,cAACiE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7e5f2498.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Info() {\r\n  return (\r\n    <div>\r\n      <h2>Weather app</h2>\r\n      <p>Know weather in your city</p>\r\n    </div>\r\n  );\r\n}\r\nexport default Info;\r\n","import React from 'react';\r\n\r\nconst Weather = ({ ...data }) => {\r\n  return (\r\n    <div>\r\n      {data.name && (\r\n        <div>\r\n          <p>\r\n            Location: {data.name}, {data.sys.country}\r\n          </p>\r\n          <p>Temperature: {data.main.temp}</p>\r\n          <p>Pressure: {data.main.pressure}</p>\r\n          <p>Sunset: {data.sys.sunset}</p>\r\n          <p>{data.error}</p>\r\n        </div>\r\n      )}\r\n      <p>{data.error}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n","import React, { useState } from 'react';\r\nimport Weather from './weather';\r\n\r\nconst API_KEY = '01195fa0bf71ec2ea337ab1a89cc4cc6';\r\nfunction Form() {\r\n  const [data, setData] = useState([]);\r\n\r\n  const gettingWeather = async (e) => {\r\n    e.preventDefault();\r\n    var city = e.target.elements.city.value;\r\n    if (city) {\r\n      const api_url = await fetch(\r\n        `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`,\r\n      );\r\n      const data = await api_url.json();\r\n      setData(data);\r\n      console.log(data);\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <form onSubmit={gettingWeather}>\r\n        <input type=\"text\" name=\"city\" placeholder=\"City\" />\r\n        <button>Receive weather</button>\r\n      </form>\r\n      <Weather {...data} />\r\n    </div>\r\n  );\r\n}\r\nexport default Form;\r\n","import React from 'react';\r\n\r\nfunction Greeting() {\r\n  return <div>Hello,stranger!</div>;\r\n}\r\n\r\nexport default Greeting;\r\n","import React from 'react';\r\nimport Info from './components/info';\r\nimport Form from './components/form';\r\nimport Greeting from './components/Greeting';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Greeting name=\"Dmitiy\" />\r\n      <Info />\r\n      <Form />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}