{"version":3,"sources":["components/welcome.js","components/info.js","components/form.js","components/weather.js","App.js","serviceWorker.js","index.js"],"names":["Welcome","react_default","a","createElement","this","props","name","React","Component","Info","Form","onSubmit","weatherMethod","type","placeholder","Weather","city","country","temp","pressure","sunset","error","API_KEY","App","state","undefined","gettingWeather","_callee","e","api_url","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","_this","setState","main","sys","console","log","stop","welcome","info","components_form","weather","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+PAOeA,mLAHP,OAAOC,EAAAC,EAAAC,cAAA,uBAAeC,KAAKC,MAAMC,KAA1B,YAFOC,IAAMC,WCUbC,mLARP,OACIR,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,8CALGI,IAAMC,WCUVE,mLARP,OACIT,EAAAC,EAAAC,cAAA,QAAMQ,SAAUP,KAAKC,MAAMO,eACvBX,EAAAC,EAAAC,cAAA,SAAOU,KAAK,OAAOP,KAAM,OAAOQ,YAAY,mCAC5Cb,EAAAC,EAAAC,cAAA,yCALGI,IAAMC,WCkBVO,EAlBC,SAACV,GACb,OACIJ,EAAAC,EAAAC,cAAA,WACKE,EAAMW,MACHf,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,sBAAcE,EAAMW,KAApB,KAA4BX,EAAMY,SAClChB,EAAAC,EAAAC,cAAA,yBAAiBE,EAAMa,MACvBjB,EAAAC,EAAAC,cAAA,sBAAcE,EAAMc,UACpBlB,EAAAC,EAAAC,cAAA,oBAAYE,EAAMe,QAClBnB,EAAAC,EAAAC,cAAA,SAAIE,EAAMgB,QAGlBpB,EAAAC,EAAAC,cAAA,SAAIE,EAAMgB,SCPhBC,EAAU,mCA0DDC,6MAvDbC,MAAQ,CACNN,UAAMO,EACNT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,YAAQK,EACRJ,WAAOI,KAGTC,qDAAiB,SAAAC,EAAOC,GAAP,IAAAZ,EAAAa,EAAAC,EAAA,OAAAC,EAAA7B,EAAA8B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACfP,EAAEQ,mBACEpB,EAAOY,EAAES,OAAOC,SAAStB,KAAKuB,OAFnB,CAAAN,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,EAISK,MAAK,oDAAAC,OAC2BzB,EAD3B,WAAAyB,OACyCnB,EADzC,kBAJd,cAIPO,EAJOI,EAAAS,KAAAT,EAAAE,KAAA,EAOMN,EAAQc,OAPd,OAOPb,EAPOG,EAAAS,KASbE,EAAKC,SAAS,CACZ3B,KAAMY,EAAKgB,KAAK5B,KAChBF,KAAMc,EAAKxB,KACXW,QAASa,EAAKiB,IAAI9B,QAClBE,SAAUW,EAAKgB,KAAK3B,SACpBE,WAAOI,IAdIQ,EAAAE,KAAA,iBAiBbS,EAAKC,SAAS,CACZ3B,UAAMO,EACNT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,YAAQK,EACRJ,MAAO,sIAvBI,QA0Bf2B,QAAQC,IAAIL,EAAKpB,OA1BF,yBAAAS,EAAAiB,SAAAvB,EAAAvB,uIA8Bf,OACEH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACgD,EAAD,CAAS7C,KAAK,WACdL,EAAAC,EAAAC,cAACiD,EAAD,MACAnD,EAAAC,EAAAC,cAACkD,EAAD,CAAMzC,cAAeR,KAAKsB,iBAC1BzB,EAAAC,EAAAC,cAACmD,EAAD,CACEpC,KAAMd,KAAKoB,MAAMN,KACjBF,KAAMZ,KAAKoB,MAAMR,KACjBC,QAASb,KAAKoB,MAAMP,QACpBE,SAAUf,KAAKoB,MAAML,SACrBE,MAAOjB,KAAKoB,MAAMH,gBAlDVd,IAAMC,WCGJ+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5e6d0aaf.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Welcome extends React.Component{\r\n    render(){\r\n        return <div>Welcome, {this.props.name}!</div>;\r\n    }\r\n}\r\nexport default Welcome;","import React from 'react';\r\n\r\nclass Info extends React.Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h2>Weather app</h2>\r\n                <p>Know weather in your city</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Info;","import React from 'react';\r\n\r\nclass Form extends React.Component{\r\n    render(){\r\n        return(\r\n            <form onSubmit={this.props.weatherMethod}>\r\n                <input type='text' name ='city' placeholder='Город'/>\r\n                <button>Receive weather</button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\nexport default Form;","import React from 'react';\r\n\r\nconst Weather = (props) => {\r\n    return (\r\n        <div>\r\n            {props.city &&\r\n                <div>\r\n                    <p>Location: {props.city}, {props.country}</p>\r\n                    <p>Temperature: {props.temp}</p>\r\n                    <p>Pressure: {props.pressure}</p>\r\n                    <p>Sunset: {props.sunset}</p>\r\n                    <p>{props.error}</p>\r\n                </div>\r\n            }\r\n            <p>{props.error}</p>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Weather;","import React from 'react';\nimport Welcome from './components/welcome';\nimport Info from './components/info';\nimport Form from './components/form';\nimport Weather from './components/weather';\n\n//API key\nconst API_KEY = '01195fa0bf71ec2ea337ab1a89cc4cc6';\n\nclass App extends React.Component {\n  state = {\n    temp: undefined,\n    city: undefined,\n    country: undefined,\n    pressure: undefined,\n    sunset: undefined,\n    error: undefined,\n  };\n\n  gettingWeather = async (e) => {\n    e.preventDefault();\n    var city = e.target.elements.city.value;\n    if (city) {\n      const api_url = await fetch(\n        `http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`,\n      );\n      const data = await api_url.json();\n\n      this.setState({\n        temp: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        pressure: data.main.pressure,\n        error: undefined,\n      });\n    } else {\n      this.setState({\n        temp: undefined,\n        city: undefined,\n        country: undefined,\n        pressure: undefined,\n        sunset: undefined,\n        error: 'Введите название города!',\n      });\n    }\n    console.log(this.state);\n  };\n\n  render() {\n    return (\n      <div>\n        <Welcome name=\"Dmitiy\" />\n        <Info />\n        <Form weatherMethod={this.gettingWeather} />\n        <Weather\n          temp={this.state.temp}\n          city={this.state.city}\n          country={this.state.country}\n          pressure={this.state.pressure}\n          error={this.state.error}\n        />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}